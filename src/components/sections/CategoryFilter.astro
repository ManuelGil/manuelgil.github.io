---
import CategoryChip from '../atoms/CategoryChip.astro';

interface Props {
  categories: string[];
}

const { categories } = Astro.props;
---

<island client:load>
  <div class="mb-8">
    <div class="mx-auto max-w-5xl">
      <div class="flex flex-wrap justify-center gap-4" id="category-filter">
        {
          categories.map((category) => (
            <CategoryChip
              label={category}
              active={category === 'All'}
              data-category={category}
              data-active={category === 'All'}
            />
          ))
        }
      </div>
    </div>
  </div>

  <script>
    class CategoryFilter {
      private buttons: NodeListOf<HTMLElement>;
      private projectCards: NodeListOf<HTMLElement>;
      private currentCategory: string = 'All';

      constructor() {
        this.buttons = document.querySelectorAll('[data-category]');
        this.projectCards = document.querySelectorAll('#projects > div');
        this.initializeEventListeners();

        // Force activation of "All" at startup
        const defaultBtn = Array.from(this.buttons).find(
          (btn) => btn.dataset.category === 'All',
        );
        if (defaultBtn) {
          this.handleCategoryClick(defaultBtn as HTMLButtonElement);
        } else {
          this.filterProjects();
        }
      }

      private initializeEventListeners(): void {
        this.buttons.forEach((button) => {
          button.addEventListener('click', () => {
            this.handleCategoryClick(button as HTMLButtonElement);
          });
        });
      }

      private handleCategoryClick(clickedButton: HTMLButtonElement): void {
        this.buttons.forEach((button) => {
          const isActive = button === clickedButton;
          button.dataset.active = String(isActive);

          // Classes for the active state
          const activeClasses = ['bg-primary', 'text-white'];
          // Classes for the inactive state
          const inactiveClasses = [
            'bg-white',
            'text-gray-600',
            'hover:bg-gray-50',
            'hover:shadow-md',
          ];

          if (isActive) {
            button.classList.remove(...inactiveClasses);
            button.classList.add(...activeClasses);
          } else {
            button.classList.remove(...activeClasses);
            button.classList.add(...inactiveClasses);
          }
        });

        this.currentCategory = clickedButton.dataset.category || 'All';

        requestAnimationFrame(() => this.filterProjects());
      }

      private filterProjects(): void {
        const projectsContainer = document.getElementById('projects');
        const emptyState = document.getElementById('empty-state');
        let visibleCount = 0;

        this.projectCards = document.querySelectorAll('#projects > div');
        this.projectCards.forEach((card) => {
          const cardCategory = card.getAttribute('data-category');
          const shouldShow =
            this.currentCategory === 'All' ||
            cardCategory === this.currentCategory;

          if (shouldShow) {
            card.style.display = '';
            setTimeout(() => {
              card.style.opacity = '1';
              card.style.transform = 'translateY(0)';
            }, 10);
            visibleCount++;
          } else {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            setTimeout(() => {
              if (
                this.currentCategory !== 'All' &&
                cardCategory !== this.currentCategory
              ) {
                card.style.display = 'none';
              }
            }, 300);
          }
        });

        if (projectsContainer && emptyState) {
          if (visibleCount === 0) {
            projectsContainer.style.display = 'none';
            emptyState.style.display = 'block';
          } else {
            projectsContainer.style.display = 'grid';
            emptyState.style.display = 'none';
          }
        }

        // Notify that the layout has changed
        window.dispatchEvent(new CustomEvent('layoutChanged'));
      }
    }

    const init = () => {
      new CategoryFilter();
    };

    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>

  <style>
    button {
      transition: all 0.3s ease;
    }

    #projects > div {
      transition: all 0.3s ease;
    }
  </style>
</island>
