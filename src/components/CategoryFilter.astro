---
import { Filter } from 'lucide-astro';

interface Props {
  categories: string[];
}

const { categories } = Astro.props;
---

<div class="mx-auto max-w-5xl">
  <div class="mb-6 flex items-center gap-2">
    <Filter class="h-5 w-5 text-gray-500" />
    <div class="flex flex-wrap gap-2" id="categories">
      {
        categories.map((category) => (
          <button
            class="category-btn rounded-full bg-gray-200 px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-300 data-[active=true]:bg-blue-500 data-[active=true]:text-white"
            data-category={category}
            data-active={category === 'All'}
          >
            {category}
          </button>
        ))
      }
    </div>
  </div>
</div>

<script>
  import { ProjectsManager } from '../services/projectsManager';
  import { ProjectCache } from '../services/projectCache';

  const categoryButtons = document.querySelectorAll('.category-btn');
  const projectsContainer = document.getElementById('projects');
  const emptyState = document.getElementById('empty-state');
  let currentProjects = [];

  // Function to update projects display
  async function loadProjects() {
    try {
      // Check cache first
      const cachedProjects = ProjectCache.getProjects();
      if (cachedProjects) {
        console.log('Using cached projects');
        currentProjects = cachedProjects;
        return;
      }

      // If no cache, fetch new data
      const projectsManager = new ProjectsManager();
      currentProjects = await projectsManager.getProjectsList();

      // Store in cache
      ProjectCache.setProjects(currentProjects);
    } catch (error) {
      console.error('Error fetching projects:', error);
      // Use initial projects from data attribute as fallback
      currentProjects = JSON.parse(
        projectsContainer?.dataset.initialProjects || '[]',
      );
    }
  }

  // Function to filter and display projects
  function filterProjects(category: string) {
    if (!projectsContainer) return;

    const filteredProjects =
      category === 'All'
        ? currentProjects
        : currentProjects.filter((project) => project.category === category);

    // Update active state of buttons
    categoryButtons.forEach((btn) => {
      btn.dataset.active = (btn.dataset.category === category).toString();
    });

    // Update projects display
    if (filteredProjects.length === 0) {
      projectsContainer.classList.add('hidden');
      emptyState?.classList.remove('hidden');
    } else {
      projectsContainer.classList.remove('hidden');
      emptyState?.classList.add('hidden');

      // Update project grid
      projectsContainer.innerHTML = filteredProjects
        .map(
          (project) => `
          <article class="group relative rounded-lg bg-white p-6 shadow-md transition-all hover:shadow-lg">
            <h3 class="mb-2 text-xl font-semibold text-gray-900">${project.title}</h3>
            <p class="mb-4 text-gray-600">${project.description}</p>
            <div class="mb-4 flex flex-wrap gap-2">
              ${project.tags
                .map(
                  (tag) => `
                <span class="rounded-full bg-gray-100 px-3 py-1 text-sm text-gray-600">
                  ${tag}
                </span>
              `,
                )
                .join('')}
            </div>
            <div class="flex gap-4">
              <a
                href="${project.links.source}"
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-800"
              >
                Source Code
                <svg class="ml-1 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                  <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                </svg>
              </a>
              <a
                href="${project.links.demo}"
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center text-sm font-medium text-blue-600 hover:text-blue-800"
              >
                Live Demo
                <svg class="ml-1 h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                  <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                </svg>
              </a>
            </div>
          </article>
        `,
        )
        .join('');
    }
  }

  // Initialize
  async function init() {
    await loadProjects();

    // Add click handlers to category buttons
    categoryButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const category = button.dataset.category;
        if (category) filterProjects(category);
      });
    });

    // Initial filter (All)
    filterProjects('All');
  }

  // Run initialization
  if (document.readyState === 'complete') {
    init();
  } else {
    window.addEventListener('load', init);
  }
</script>
